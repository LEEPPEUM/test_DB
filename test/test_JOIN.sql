-- -- SQLite

-- INSERT INTO COMPANY VALUES (10, 'Smith', 25, 'Texas', 35000.00);

CREATE TABLE OLD_COMPANY_2 (
ID REAL NULL,
NAME TEXT NULL,
AGE REAL NULL,
ADDRESS TEXT NULL,
SALARY REAL NULL
);

INSERT INTO OLD_COMPANY_2
SELECT *
FROM COMPANY 
WHERE NAME == 'Paul';


SELECT COMPANY.*, DEPARTMENT.*
FROM COMPANY CROSS JOIN DEPARTMENT;

SELECT count(COMPANY.ID);

-- FROM 되는 기준이 되는 테이블과 JOIN 되는 테이블은 순서가 바뀌어도 상관없음. 
-- 값은 똑같이 나옴.

SELECT EMP_ID, NAME, DEPT
FROM DEPARTMENT
INNER JOIN COMPANY
ON COMPANY.ID = DEPARTMENT.ID;

SELECT EMP_ID, NAME, DEPT
FROM COMPANY
INNER JOIN DEPARTMENT
ON COMPANY.ID = DEPARTMENT.ID
AND COMPANY.NAME = 'Paul';

SELECT EMP_ID, COMPANY.NAME, DEPT, OLD_COMPANY.NAME
FROM COMPANY
INNER JOIN DEPARTMENT
ON COMPANY.ID = DEPARTMENT.ID
INNER JOIN OLD_COMPANY
ON COMPANY.ID = OLD_COMPANY.ID;



-- LEFT OUTER JOIN ON

SELECT * FROM COMPANY;
SELECT * FROM DEPARTMENT;

SELECT COMPANY.ID, COMPANY.NAME, DEPARTMENT.DEPT
FROM COMPANY
LEFT OUTER JOIN DEPARTMENT
ON COMPANY.ID = DEPARTMENT.EMP_ID;



SELECT COMPANY.ID, COMPANY.NAME, OLD_COMPANY.NAME
FROM COMPANY
LEFT OUTER JOIN OLD_COMPANY
ON COMPANY.ID = OLD_COMPANY.ID;

SELECT COMP.NAME, AGE, DEPT, EMP_ID
FROM (SELECT * FROM COMPANY WHERE SALARY > 2000) AS COMP
LEFT OUTER JOIN DEPARTMENT
ON COMP.ID = DEPARTMENT.EMP_ID;


-- -- UNION, UNION ALL

-- SELECT EMP_ID, NAME, DEPT FROM COMPANY
-- INNER JOIN DEPARTMENT
-- ON COMPANY.ID = DEPARTMENT.EMP_ID;

-- SELECT EMP_ID, NAME, DEPT FROM COMPANY
-- LEFT OUTER JOIN DEPARTMENT
-- ON COMPANY.ID = DEPARTMENT.EMP_ID;


-- SELECT EMP_ID, NAME, DEPT FROM COMPANY
-- INNER JOIN DEPARTMENT
-- ON COMPANY.ID = DEPARTMENT.EMP_ID
-- UNION 
-- SELECT EMP_ID, NAME, DEPT FROM COMPANY
-- LEFT OUTER JOIN DEPARTMENT
-- ON COMPANY.ID = DEPARTMENT.EMP_ID;


-- SELECT EMP_ID, NAME, DEPT FROM COMPANY
-- INNER JOIN DEPARTMENT
-- ON COMPANY.ID = DEPARTMENT.EMP_ID
-- UNION ALL
-- SELECT EMP_ID, NAME, DEPT FROM COMPANY
-- LEFT OUTER JOIN DEPARTMENT
-- ON COMPANY.ID = DEPARTMENT.EMP_ID;


-- -- VIEW
-- CREATE VIEW COMPANY_VIEW AS
-- SELECT ID, NAME, AGE
-- FROM COMPANY;

-- SELECT * FROM COMPANY_VIEW;
-- DROP VIEW COMPANY_VIEW;



-- -- CASE WHEN THEN ELSE END

SELECT * FROM OLD_COMPANY;

SELECT NAME, ADDRESS,
CASE NAME
WHEN 'Paul' THEN SALARY
WHEN 'David' THEN AGE
ELSE 'ETC' 
-- NULL을 ETC로 입력함.
END AS NAME_CASE
FROM OLD_COMPANY;

SELECT NAME, ADDRESS,
CASE NAME
WHEN 'Paul' THEN SALARY
WHEN 'David' THEN AGE
-- WHEN THEN에 걸리지 않고 따로 ELSE로 언급안해주면 NULL로 처리됨.
END AS NAME_CASE
FROM OLD_COMPANY;

SELECT NAME, ADDRESS,
CASE WHEN NAME == 'Kim' THEN SALARY
END AS NAME01_CASE,
CASE WHEN NAME == 'Allen' THEN AGE
END AS NAME02_CASE
FROM OLD_COMPANY 
GROUP BY ADDRESS;

SELECT * FROM OLD_COMPANY
GROUP BY ADDRESS;

SELECT ID, max(NAME) AS NAME, ADDRESS,
CASE
WHEN NAME == 'Paul' THEN SALARY
END AS NAME02_CASE,
CASE
WHEN NAME == 'David' THEN AGE
END AS NAME01_CASE
FROM OLD_COMPANY 
GROUP BY ADDRESS;




